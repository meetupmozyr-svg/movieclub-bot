import os
import json
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)
from telegram.ext.persistence import PicklePersistence

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –°–û–°–¢–û–Ø–ù–ò–ô ---
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
(
    CHOOSING_TITLE, 
    CHOOSING_DATE, 
    CHOOSING_TIME, 
    CHOOSING_DESCRIPTION, 
    CONFIRM_EVENT
) = range(5)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
WAITING_FOR_EVENT_ID, WAITING_FOR_NAME = range(5, 7)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ï–†–ï–ú–ï–ù–ù–´–• ---
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏)
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
persistence = PicklePersistence(filepath="movie_club_persistence.pkl")
print("–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Å –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ.")

# --- –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• –î–õ–Ø –°–û–ë–´–¢–ò–ô ---
# events = {
#     "event_id": {
#         "title": "...",
#         "date": "...",
#         "time": "...",
#         "description": "...",
#         "creator_id": 12345,
#         "registrations": {
#             12345678: "User Name 1",
#             98765432: "User Name 2",
#             ...
#         }
#     },
#     ...
# }
events = persistence.get_user_data().get("events", {})
if not events:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º 'events' –≤ user_data, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    persistence.user_data["events"] = {}
    events = persistence.user_data["events"]

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def generate_event_id() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è."""
    return str(len(events) + 1).zfill(4) # 0001, 0002, ...

def save_events_to_persistence(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è events –≤ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å."""
    context.application.persistence.user_data["events"] = events
    context.application.persistence.flush()

def format_event_details(event_data: dict, event_id: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    registrations = event_data.get("registrations", {})
    
    details = (
        f"üé¨ **ID –°–æ–±—ã—Ç–∏—è:** `{event_id}`\n"
        f"üåü **–ù–∞–∑–≤–∞–Ω–∏–µ:** {event_data['title']}\n"
        f"üìÖ **–î–∞—Ç–∞:** {event_data['date']}\n"
        f"‚è∞ **–í—Ä–µ–º—è:** {event_data['time']}\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {event_data['description']}\n"
        f"\n"
        f"üë§ **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ({len(registrations)}):**\n"
    )
    
    if registrations:
        names = "\n".join([f"  ‚Ä¢ {name}" for name in registrations.values()])
        details += names
    else:
        details += "  _–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è._"

    return details

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–û–ú–ê–ù–î ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–∏–Ω–æ–∫–ª—É–±–∞.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∫–∏–Ω–æ–∫–ª—É–±–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º).\n"
        "‚Ä¢ /register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ.\n"
        "‚Ä¢ /events - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.\n"
        "‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
    )
    await update.message.reply_text(welcome_message)

async def show_events(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /events –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π."""
    if not events:
        await update.message.reply_text("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ —Å –ø–æ–º–æ—â—å—é /create!")
        return
    
    response_text = "‚ú® **–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π** ‚ú®\n\n"
    
    for event_id, data in events.items():
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reg_count = len(data.get("registrations", {}))
        
        response_text += (
            f"**{data['title']}** (`{event_id}`)\n"
            f"  ‚Ä¢ –î–∞—Ç–∞: {data['date']} –≤ {data['time']}\n"
            f"  ‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {reg_count}\n"
            f"  ‚Ä¢ /details{event_id} - –ü–æ–¥—Ä–æ–±–Ω–µ–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n"
        )
        
    await update.message.reply_text(response_text, parse_mode="Markdown")

async def show_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–∏–ø–∞ /details0001
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, /details0001 -> 0001)
    event_id = update.message.text.split('/details')[1]

    if event_id not in events:
        await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ —Å ID `{event_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="Markdown")
        return

    event_data = events[event_id]
    details = format_event_details(event_data, event_id)
    
    keyboard = [
        [f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ {event_id}"],
        [f"–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ {event_id}"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        details, 
        parse_mode="Markdown", 
        reply_markup=reply_markup
    )

# --- –î–ò–ê–õ–û–ì –°–û–ó–î–ê–ù–ò–Ø –°–û–ë–´–¢–ò–Ø (/create) ---

async def create_event(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""
    # ************************************************
    # *** –£–î–ê–õ–ï–ù–ê –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê. –î–û–°–¢–£–ü–ù–û –í–°–ï–ú. ***
    # ************************************************
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
    context.user_data['new_event'] = {
        'creator_id': update.effective_user.id
    }
    
    await update.message.reply_text(
        "üé¨ **–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è!**\n"
        "–í–≤–µ–¥–∏—Ç–µ **–Ω–∞–∑–≤–∞–Ω–∏–µ** —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–∞ "
        "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä').",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="Markdown"
    )
    return CHOOSING_TITLE

async def receive_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è."""
    title = update.message.text
    context.user_data['new_event']['title'] = title
    
    await update.message.reply_text(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: **{title}**.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ **–¥–∞—Ç—É** —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '01.12.2025' –∏–ª–∏ '–∑–∞–≤—Ç—Ä–∞').",
        parse_mode="Markdown"
    )
    return CHOOSING_DATE

async def receive_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è."""
    date_text = update.message.text
    context.user_data['new_event']['date'] = date_text
    
    await update.message.reply_text(
        f"–î–∞—Ç–∞: **{date_text}**.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ **–≤—Ä–µ–º—è** –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '20:00' –∏–ª–∏ '—Å–µ–º—å –≤–µ—á–µ—Ä–∞').",
        parse_mode="Markdown"
    )
    return CHOOSING_TIME

async def receive_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è."""
    time_text = update.message.text
    context.user_data['new_event']['time'] = time_text
    
    await update.message.reply_text(
        f"–í—Ä–µ–º—è: **{time_text}**.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ **–æ–ø–∏—Å–∞–Ω–∏–µ** —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°–º–æ—Ç—Ä–∏–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ 4K, "
        "–∑–∞–ø–∞—Å–∞–µ–º—Å—è –ø–æ–ø–∫–æ—Ä–Ω–æ–º!').",
        parse_mode="Markdown"
    )
    return CHOOSING_DESCRIPTION

async def receive_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å."""
    description = update.message.text
    context.user_data['new_event']['description'] = description
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    temp_id = generate_event_id() # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    event_data = context.user_data['new_event']
    
    confirmation_text = "‚ú® **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ** ‚ú®\n\n" + \
                        format_event_details(event_data, temp_id)
    
    keyboard = [["–î–∞, —Å–æ–∑–¥–∞—Ç—å!", "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        confirmation_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    return CONFIRM_EVENT

async def confirm_event(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ."""
    user_choice = update.message.text
    
    if user_choice == "–î–∞, —Å–æ–∑–¥–∞—Ç—å!":
        new_event_data = context.user_data['new_event']
        new_event_data['registrations'] = {} # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        
        event_id = generate_event_id()
        events[event_id] = new_event_data
        
        save_events_to_persistence(context) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
        
        await update.message.reply_text(
            f"‚úÖ **–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!**\n"
            f"ID: `{event_id}`. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º —Å –¥—Ä—É–∑—å—è–º–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /details{event_id} –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="Markdown"
        )
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞
        del context.user_data['new_event']
        return ConversationHandler.END
    
    elif user_choice == "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text(
            "‚ùå **–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.**",
            reply_markup=ReplyKeyboardRemove()
        )
        del context.user_data['new_event']
        return ConversationHandler.END
    
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
        keyboard = [["–î–∞, —Å–æ–∑–¥–∞—Ç—å!", "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ '–î–∞, —Å–æ–∑–¥–∞—Ç—å!' –∏–ª–∏ '–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å'.",
            reply_markup=reply_markup
        )
        return CONFIRM_EVENT # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏

# --- –î–ò–ê–õ–û–ì –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò (/register) ---

async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    
    if not events:
        await update.message.reply_text("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ —Å –ø–æ–º–æ—â—å—é /create!")
        return ConversationHandler.END

    event_ids = list(events.keys())
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ ID
    keyboard = [[event_id] for event_id in event_ids]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "üìù **–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!**\n"
        "–í–≤–µ–¥–∏—Ç–µ **ID** —Å–æ–±—ã—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:",
        reply_markup=reply_markup
    )
    return WAITING_FOR_EVENT_ID

async def receive_event_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    event_id = update.message.text.strip().upper().zfill(4) # –ß–∏—Å—Ç–∏–º –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É ID
    
    if event_id not in events:
        keyboard = [[eid] for eid in events.keys()]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await update.message.reply_text(
            f"‚ùå –°–æ–±—ã—Ç–∏–µ —Å ID `{event_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ID –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return WAITING_FOR_EVENT_ID
        
    context.user_data['registration_target_id'] = event_id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_id = update.effective_user.id
    if user_id in events[event_id].get('registrations', {}):
        keyboard = [["–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await update.message.reply_text(
            f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–æ–±—ã—Ç–∏–µ **{events[event_id]['title']}**!\n"
            "–•–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã
        return WAITING_FOR_NAME 
    
    await update.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ–±—ã—Ç–∏–µ **{events[event_id]['title']}**.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ **–∏–º—è**, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã "
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ê–ª–µ–∫—Å–µ–π' –∏–ª–∏ '–ú–∞—Ä–∏—è –†.'):",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="Markdown"
    )
    return WAITING_FOR_NAME

async def receive_name_and_register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    event_id = context.user_data.get('registration_target_id')
    user_name = update.message.text.strip()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
    if user_name == "–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
        if user_id in events[event_id]['registrations']:
            del events[event_id]['registrations'][user_id]
            save_events_to_persistence(context)
            await update.message.reply_text(
                f"‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞** –Ω–∞ —Å–æ–±—ã—Ç–∏–µ `{event_id}`: **{events[event_id]['title']}**.",
                reply_markup=ReplyKeyboardRemove(),
                parse_mode="Markdown"
            )
        else:
             await update.message.reply_text(
                "–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ. –û—Ç–º–µ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.",
                reply_markup=ReplyKeyboardRemove()
            )
        del context.user_data['registration_target_id']
        return ConversationHandler.END

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if not user_name:
        await update.message.reply_text(
            "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
        return WAITING_FOR_NAME

    # –ï—Å–ª–∏ registrations –µ—â–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if 'registrations' not in events[event_id]:
        events[event_id]['registrations'] = {}
        
    events[event_id]['registrations'][user_id] = user_name
    
    save_events_to_persistence(context)
    
    await update.message.reply_text(
        f"üéâ **–ì–æ—Ç–æ–≤–æ!** –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ **{user_name}** –Ω–∞ —Å–æ–±—ã—Ç–∏–µ **{events[event_id]['title']}**.",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="Markdown"
    )
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞
    del context.user_data['registration_target_id']
    return ConversationHandler.END

# --- –û–¢–ú–ï–ù–ê –î–ò–ê–õ–û–ì–û–í ---

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç user_data."""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è
    if 'new_event' in context.user_data:
        del context.user_data['new_event']
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
    if 'registration_target_id' in context.user_data:
        del context.user_data['registration_target_id']

    await update.message.reply_text(
        "üö´ **–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.**", 
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ---

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if not BOT_TOKEN:
        print("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Application —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
    application = Application.builder().token(BOT_TOKEN).persistence(persistence).build()
    
    # --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("events", show_events))
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /detailsXXXX
    application.add_handler(MessageHandler(
        filters.Regex(r'^/details[0-9]{4}$'), show_details
    ))
    
    # --- –î–ò–ê–õ–û–ì –°–û–ó–î–ê–ù–ò–Ø –°–û–ë–´–¢–ò–Ø ---
    create_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("create", create_event)],
        states={
            CHOOSING_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_title)],
            CHOOSING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_date)],
            CHOOSING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_time)],
            CHOOSING_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_description)],
            CONFIRM_EVENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_event)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        persistent=True,
        name="create_event_conversation"
    )
    application.add_handler(create_conv_handler)

    # --- –î–ò–ê–õ–û–ì –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ---
    register_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("register", register_start)],
        states={
            WAITING_FOR_EVENT_ID: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_event_id),
            ],
            WAITING_FOR_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_name_and_register)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        persistent=True,
        name="registration_conversation"
    )
    application.add_handler(register_conv_handler)
    
    print("–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ Webhook...")
    
    # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ Webhook (–¥–ª—è Render)
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ PORT –∏ WEBHOOK_URL —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ Render
    PORT = int(os.environ.get("PORT", 8080))
    WEBHOOK_URL = os.environ.get("WEBHOOK_URL")

    if WEBHOOK_URL:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Webhook
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=BOT_TOKEN,
            webhook_url=WEBHOOK_URL + BOT_TOKEN
        )
    else:
        # –ï—Å–ª–∏ WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫), –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–æ—Å
        print("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ Long Polling (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è).")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
